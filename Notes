1.1. Creating a chat server with ServerSocket
  -> seversocket object 
  -> clienSocket of Socket datatype which accpet the incoming connection and stores the data
  -> create an OutputStream object which gets the clientSocket outputstream
  -> outputstream.write(("data").getBytes());   -> data is the data to be sent through the outputstream and getBytes encodes the data to make it able to travel.
  -> clientSocket.close() to close to connection on client side after the message has been sent.
  -> Thread.sleep(1000) to delay each message by 1000 milliseconds = 1 second 
  -> clientSocket close right after the outputstream message

1.2. Accepting multiple clients
  -> one thread to listen on clients - main thread
  -> other threads to handle the clients (one thread per client)
  -> new method handleClientSocket
  -> inside handleClientSocket{
      - output stream object
      - outputstream.write to send data
      - Thread.sleep()
      
  -> new thread inside which
      - run method
      - call the handleServerSocket method with clientSocket parameter
      -> remember semicolon after closing the thread (i.e.  };)
      - start the thread

1.3. Creating ServerWorker class to handle multiple clients
  -> Create Server worker class which extends thread
  -> create clientSocket method of Socket datatype
  -> constructor which takes clientsocket as parameter
  -> thrad's run method insdie which
     - call handleClientSocket method with clientsocket as parameter
     
  -> copy handleClientSocket method from previous phase but remove static
  
  
2.3. To show everyone when a user has logged in, we need access to every connection in the server. 
      Since that is the job of the ServerMain, we will now Refactor the Server Main by making a server object which will have the collection of server workers. 
      In server, we want to have multiple Serverworkers and we want to iterate through those workers and that's how we will send login information from one
      conenction to other connection.
  


3.3 # Final Chat Application

run the ServerMain and then in the terminal -> telnet localhost <port>
to login -> login <username> <password>
to msg a user -> msg <user you want to send> <the message>
to create a topic and join -> join #<topic_name>
to msg in a topc -> msg #<topic_name> <the message>
to quit or logout -> exit or logout
